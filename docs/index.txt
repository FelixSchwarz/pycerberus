
pycerberus documentation
************************

pycerberus is a framework to check user data thoroughly so that you can protect
your application from malicious (or just garbled) input data.

* **Remove stupid code which converts input values:** After values are validated, you 
  can work with real Python types instead of strings - e.g. 42 instead of '42', 
  convert database IDs to model objects transparently.
* **Implement custom validation rules:** Writing custom validators is 
  straightforward, everything is well documented and pycerberus only uses very 
  little Python magic.
* **Focus on your value-adding application code:** Save time by implementing every 
  input validation rule only once, but 100% right instead of implementing a 
  dozen different half-baked solutions.
* **Ready for global business:** i18n support (based on GNU gettext) is built in, 
  adding custom translations is easy.
* **Tune it for your needs:** You can implement custom behavior in your validators,
  e.g. fetch translations from a database instead of using gettext or define
  custom translations for built-in validators.
* **Use it wherever you like:** pycerberus does not depend on specific contexts
  (e.g. web development) so you can also use it in every Python application. 

.. highlight:: python

Contents:
==================================


.. toctree::
   :maxdepth: 2


Installation and Setup
==================================

pycerberus is just a Python library which uses setuptools so it does not require
a special setup. It has no dependencies besides the standard Python library. 
Python 2.4-2.6 is supported.


Background
==================================

In every software you must protect yourself from user input data which was not 
checked carefully. However many checks are repetitive and validation logic tend
tend to be scattered all around the code. Because basic checks are duplicated 
in the code, people tend to forget to check also for uncommon edge cases.
Eventually there is often also some code to convert the input data (usually 
strings) to more convenient Python data types like int or bool.

pycerberus is a framework that tackles these common problems and allows
you to write tailored validators to perform additional checks. Furthermore the 
framework also has built-in support for less common (but important) use cases
like internationalization.

The framework itself is heavily inspired by `FormEncode <http://www.formencode.org>`_
by Ian Bicking. Therefore most of `FormEncode's design rationale <http://www.formencode.org/Design.html>`_
is directly applicable to pycerberus. However several things about FormEncode 
annoyed me so much that I decided to write my own library when I needed one for 
my SMTP server project `pymta <www.schwarz.eu/opensource/projects/pymta>`_.


Development Status
==================================

Currently (February 2010, version 0.1) pycerberus is at a very basic stage - 
though with very solid foundations. The API for single validators is basically
complete, i18n support is built in and there is decent documentation covering
all important aspects.

The future development will focus on *compound validators* (Schema) and *repeating
fields*. After that, I'll try to increase the number of *built-in validators for
specific domains* (e.g. *correct* email address validation, validating host names,
localized numbers). Another interesting topic will be *integration into different
frameworks* like `TurboGears <http://www.turbogears.org>`_ and 
`trac <http://trac.edgewall.org>`_.



Using validators
==================================

Every basic validator validates a just single value (e.g. one specific input 
field in a web application). When the validation was successful the validated 
and converted value is returned. If something is wrong with the data, an 
exception is raised::

    from pycerberus.validators import IntegerValidator
    IntegerValidator().process('42') # returns 42 as int

pycerberus puts conversion and validation together in one call because of two
main reasons:

* As a user you need to convert input data (usually strings) anyway into a more
  sensible format (e.g. int). These lines of code are redundant because you 
  declared in the validator already what the value should be.
* During the validation process, it is very easy to do also the conversion. In
  fact many validations are done just by trying to do a conversion and catch
  all exceptions that were raised during that process.



Validation Errors
----------------------------------

Every validation error will trigger an exception, usually an ``InvalidDataError``.
This exception will contain a translated error message which can be presented to
the user, a key so you can identify the exact error programmatically and the 
original, unmodified value::

    from pycerberus.errors import InvalidDataError
    from pycerberus.validators import IntegerValidator
    try:
        IntegerValidator().process('foo')
    except InvalidDataError, e:
        error_message = e.msg       # u'Please enter a number.'
        original_value = e.value    # 'foo'
        error_key = e.key           # 'invalid_number'


Configuring Validators
----------------------------------

You can configure the behavior of the validator when instantiating it. For 
example, if you pass ``required=False`` to the constructor, most validators will
also accept ``None`` as a valid value::

        IntegerValidator(required=True).process(None)  # -> validation error
        IntegerValidator(required=False).process(None) # None

Validators support different configuration options which are explained along the
validator description.


Context
----------------------------------

All validators support an optional ``context`` argument (which defaults to an
emtpy dict). It is used to plug validators into your application and make
them aware of the overall system state: For example a validator must know which
locale it should use to translate an error message to the correct language 
without relying on some global variables::

    context = {'locale': 'de'}
    validator = IntegerValidator()
    validator.process('foo', context=context) # u'Bitte geben Sie eine Zahl ein.'

The context variable is especially useful when writing custom validators - 
locale is the only context information that pycerberus cares about.


Available validators
==================================


Writing your own validators
==================================

After all, using only built-in validators won't help you much if: In the end 
you need you custom validation rules which means that you need to write your
own validators.

pycerberus comes with two classes that can serve as a good base when you start
writing a custom validator: The ``BaseValidator`` only provides the absolutely
required set of API so you have maximum freedom. The ``Validator`` class itself
is inherited from the ``BaseValidator`` and defines a more sophisticated API 
and i18n support. Usually you should use the ``Validator`` class.


BaseValidator
----------------------------------

.. autoclass:: pycerberus.api.BaseValidator
   :members:


Validator
----------------------------------

.. autoclass:: pycerberus.api.Validator
   :members:


convert/validate
----------------------------------

Miscellaneous
----------------------------------

pycerberus uses `simple_super <http://www.hÃ¤cker.net/trac/browser/open-source/python-simple-super/trunk/simple_super.py>`_
so you can just say 'self.super()' in your custom validator classes. This will
call the super implementation with just the same parameters as your method was
called.


Internationalization
==================================

Modern applications must be able to handle different languages. 
Internationalization (i18n) in pycerberus refers to validating 
locale-dependent input data (e.g. different decimal separator characters) as 
well as validation errors in different languages. The former aspect is not yet
covered by default but you should be able to write custom validators easily. 

All messages from validators included in pycerberus are translated in 
different languages using the standard gettext library. The language of 
validation error messages will be chosen depending on the locale which is given 
in the state dictionary,

i18n support in pycerberus is a bit broader than just translating 
existing error messages:

* Using slightly different options for the built-in gettext lookup (e.g. a 
  different domain or a different locale dir) is just a matter of overwriting
  one method.
* With overwriting another method you can retrieve translations from other 
  sources than a gettext catalog (e.g. a database or an XML file).
* If you extend an existing validator class, you can still reuse all existing
  translations for the super class without any effort and any influence how you
  want to handle translations in your subclass.
* Changing all (or just some) messages from a super class is done by 
  redefining the IDs ('key') in your subclass.

All i18n support in pycerberus aims to provide custom validators with a
nice, simple-to-use API while maintaining the flexibility that serious 
applications need.


Domains, Translations
---------------------

Locale dirs
--------------------

Every validator object can have its own directory where translations (.mo files
for gettext) are stored. By default pycerberus looks in ''pycerberus.locales''
and falls back to the system-wide locale dir ''/usr/share/locale''. However you
can specify arbitrary directories by returning another value for the key 
'localedir' when you overwrite ''translation_parameters()''.


Custom Messages
--------------------


Getting Help
==============================


License
==============================

pycerberus is licensed under the MIT license. As there are no other dependencies
(besides Python itself), you can easily use pycerberus in 

